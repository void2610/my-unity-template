using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

namespace Void2610.UnityTemplate
{
    /// <summary>
    /// 拡張Buttonコンポーネント
    /// interactableがfalseの状態でもナビゲーション選択を可能にする
    /// </summary>
    public class MyButton : Button
    {
        /// <summary>
        /// 選択時の処理（ナビゲーションで選択された時）
        /// interactableがfalseでも選択を許可
        /// </summary>
        public override void OnSelect(BaseEventData eventData)
        {
            // interactableの値に関係なく選択を許可
            if (eventData.selectedObject == gameObject)
            {
                base.OnSelect(eventData);
            }
        }

        /// <summary>
        /// ナビゲーション移動時の処理
        /// interactableがfalseでも移動を許可
        /// </summary>
        public override void OnMove(AxisEventData eventData)
        {
            // interactableの値に関係なく移動を許可
            base.OnMove(eventData);
        }

        /// <summary>
        /// キーボード/コントローラーでの決定入力処理
        /// interactableがtrueの場合のみ実行
        /// </summary>
        public override void OnSubmit(BaseEventData eventData)
        {
            if (!interactable) return;
            base.OnSubmit(eventData);
        }

        /// <summary>
        /// マウスクリック処理
        /// interactableがtrueの場合のみ実行
        /// </summary>
        public override void OnPointerClick(PointerEventData eventData)
        {
            if (!interactable) return;
            base.OnPointerClick(eventData);
        }

        /// <summary>
        /// マウスホバー時の処理
        /// interactableがfalseでも選択状態に変更
        /// </summary>
        public override void OnPointerEnter(PointerEventData eventData)
        {
            base.OnPointerEnter(eventData);
            
            // interactableがfalseでもホバー時に選択状態にする
            if (!interactable && IsInteractable())
            {
                Select();
            }
        }

        /// <summary>
        /// ボタンが選択可能かどうかを判定
        /// （Selectableクラスの内部メソッドの代替）
        /// </summary>
        protected virtual bool IsInteractable()
        {
            return gameObject.activeInHierarchy;
        }
    }
}